
GPIO_Driver_Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f4  080003fc  000103fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f4  080003f4  000103fc  2**0
                  CONTENTS
  4 .ARM          00000000  080003f4  080003f4  000103fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f4  080003fc  000103fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003fc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003fc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000527  00000000  00000000  0001042c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000225  00000000  00000000  00010953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00010b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00010c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010af  00000000  00000000  00010c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000855  00000000  00000000  00011d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000040b8  00000000  00000000  00012564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001661c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000124  00000000  00000000  0001666c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003dc 	.word	0x080003dc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003dc 	.word	0x080003dc

08000204 <gpio_init>:
#include "gpio.h"


//Enables the bus clock
void gpio_init(uint32_t GPIOxEN){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= GPIOxEN;
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <gpio_init+0x20>)
 800020e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000210:	4904      	ldr	r1, [pc, #16]	; (8000224 <gpio_init+0x20>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4313      	orrs	r3, r2
 8000216:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	40023800 	.word	0x40023800

08000228 <gpio_mode>:

//Sets as general purpose output mode
void gpio_mode(gpioTypeDef * gpioPointer , uint8_t pinNo, uint8_t mode){
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	460b      	mov	r3, r1
 8000232:	70fb      	strb	r3, [r7, #3]
 8000234:	4613      	mov	r3, r2
 8000236:	70bb      	strb	r3, [r7, #2]

 if(mode == 1){
 8000238:	78bb      	ldrb	r3, [r7, #2]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d118      	bne.n	8000270 <gpio_mode+0x48>
	(pinNo) = ((pinNo) * 2);
 800023e:	78fb      	ldrb	r3, [r7, #3]
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	70fb      	strb	r3, [r7, #3]
	gpioPointer-> MODER |= (1U << (pinNo));
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	78fb      	ldrb	r3, [r7, #3]
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
 8000250:	431a      	orrs	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	601a      	str	r2, [r3, #0]
	(pinNo) =((pinNo) + 1);
 8000256:	78fb      	ldrb	r3, [r7, #3]
 8000258:	3301      	adds	r3, #1
 800025a:	70fb      	strb	r3, [r7, #3]
	gpioPointer-> MODER &= ~(1U << (pinNo));
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	78fb      	ldrb	r3, [r7, #3]
 8000262:	2101      	movs	r1, #1
 8000264:	fa01 f303 	lsl.w	r3, r1, r3
 8000268:	43db      	mvns	r3, r3
 800026a:	401a      	ands	r2, r3
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	601a      	str	r2, [r3, #0]
 }
 if(mode == 0){
 8000270:	78bb      	ldrb	r3, [r7, #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d119      	bne.n	80002aa <gpio_mode+0x82>
	(pinNo) = ((pinNo) * 2);
 8000276:	78fb      	ldrb	r3, [r7, #3]
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	70fb      	strb	r3, [r7, #3]
	gpioPointer-> MODER &= ~(1U << (pinNo));
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	78fb      	ldrb	r3, [r7, #3]
 8000282:	2101      	movs	r1, #1
 8000284:	fa01 f303 	lsl.w	r3, r1, r3
 8000288:	43db      	mvns	r3, r3
 800028a:	401a      	ands	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	601a      	str	r2, [r3, #0]
	(pinNo) =((pinNo) + 1);
 8000290:	78fb      	ldrb	r3, [r7, #3]
 8000292:	3301      	adds	r3, #1
 8000294:	70fb      	strb	r3, [r7, #3]
	gpioPointer-> MODER &= ~(1U << (pinNo));
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	78fb      	ldrb	r3, [r7, #3]
 800029c:	2101      	movs	r1, #1
 800029e:	fa01 f303 	lsl.w	r3, r1, r3
 80002a2:	43db      	mvns	r3, r3
 80002a4:	401a      	ands	r2, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	601a      	str	r2, [r3, #0]
 }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr

080002b6 <gpio_input>:

uint8_t gpio_input(gpioTypeDef * gpioPointer , uint8_t pinNo){
 80002b6:	b480      	push	{r7}
 80002b8:	b083      	sub	sp, #12
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
 80002be:	460b      	mov	r3, r1
 80002c0:	70fb      	strb	r3, [r7, #3]
	if ((gpioPointer-> IDR) & (1 << pinNo)){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	691b      	ldr	r3, [r3, #16]
 80002c6:	78fa      	ldrb	r2, [r7, #3]
 80002c8:	2101      	movs	r1, #1
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	4013      	ands	r3, r2
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <gpio_input+0x22>
       return 1;
 80002d4:	2301      	movs	r3, #1
 80002d6:	e000      	b.n	80002da <gpio_input+0x24>
	}
	else{
	   return 0;
 80002d8:	2300      	movs	r3, #0
	}

}
 80002da:	4618      	mov	r0, r3
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
	...

080002e8 <main>:
const uint8_t PA5 = 5;
const uint8_t PB7 = 7;
const uint8_t PE12 = 12;

int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
    gpio_init(GPIOAEN);
 80002ee:	2001      	movs	r0, #1
 80002f0:	f7ff ff88 	bl	8000204 <gpio_init>
    gpio_init(GPIOBEN);
 80002f4:	2002      	movs	r0, #2
 80002f6:	f7ff ff85 	bl	8000204 <gpio_init>
    gpio_init(GPIOEEN);
 80002fa:	2010      	movs	r0, #16
 80002fc:	f7ff ff82 	bl	8000204 <gpio_init>

    gpio_mode(GPIOA, PA5 , INPUT);
 8000300:	2305      	movs	r3, #5
 8000302:	2200      	movs	r2, #0
 8000304:	4619      	mov	r1, r3
 8000306:	480b      	ldr	r0, [pc, #44]	; (8000334 <main+0x4c>)
 8000308:	f7ff ff8e 	bl	8000228 <gpio_mode>
    gpio_mode(GPIOB, PB7 , OUTPUT);
 800030c:	2307      	movs	r3, #7
 800030e:	2201      	movs	r2, #1
 8000310:	4619      	mov	r1, r3
 8000312:	4809      	ldr	r0, [pc, #36]	; (8000338 <main+0x50>)
 8000314:	f7ff ff88 	bl	8000228 <gpio_mode>
    gpio_mode(GPIOE, PE12, OUTPUT);
 8000318:	230c      	movs	r3, #12
 800031a:	2201      	movs	r2, #1
 800031c:	4619      	mov	r1, r3
 800031e:	4807      	ldr	r0, [pc, #28]	; (800033c <main+0x54>)
 8000320:	f7ff ff82 	bl	8000228 <gpio_mode>

	while(1){
	    uint8_t val = gpio_input(GPIOA , PA5);
 8000324:	2305      	movs	r3, #5
 8000326:	4619      	mov	r1, r3
 8000328:	4802      	ldr	r0, [pc, #8]	; (8000334 <main+0x4c>)
 800032a:	f7ff ffc4 	bl	80002b6 <gpio_input>
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
	while(1){
 8000332:	e7f7      	b.n	8000324 <main+0x3c>
 8000334:	40020000 	.word	0x40020000
 8000338:	40020400 	.word	0x40020400
 800033c:	40021000 	.word	0x40021000

08000340 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000340:	480d      	ldr	r0, [pc, #52]	; (8000378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000342:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000344:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000348:	480c      	ldr	r0, [pc, #48]	; (800037c <LoopForever+0x6>)
  ldr r1, =_edata
 800034a:	490d      	ldr	r1, [pc, #52]	; (8000380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800034c:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <LoopForever+0xe>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000350:	e002      	b.n	8000358 <LoopCopyDataInit>

08000352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000356:	3304      	adds	r3, #4

08000358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800035c:	d3f9      	bcc.n	8000352 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035e:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000360:	4c0a      	ldr	r4, [pc, #40]	; (800038c <LoopForever+0x16>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000364:	e001      	b.n	800036a <LoopFillZerobss>

08000366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000368:	3204      	adds	r2, #4

0800036a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800036c:	d3fb      	bcc.n	8000366 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036e:	f000 f811 	bl	8000394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000372:	f7ff ffb9 	bl	80002e8 <main>

08000376 <LoopForever>:

LoopForever:
  b LoopForever
 8000376:	e7fe      	b.n	8000376 <LoopForever>
  ldr   r0, =_estack
 8000378:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800037c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000380:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000384:	080003fc 	.word	0x080003fc
  ldr r2, =_sbss
 8000388:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800038c:	2000001c 	.word	0x2000001c

08000390 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC_IRQHandler>
	...

08000394 <__libc_init_array>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	4d0d      	ldr	r5, [pc, #52]	; (80003cc <__libc_init_array+0x38>)
 8000398:	4c0d      	ldr	r4, [pc, #52]	; (80003d0 <__libc_init_array+0x3c>)
 800039a:	1b64      	subs	r4, r4, r5
 800039c:	10a4      	asrs	r4, r4, #2
 800039e:	2600      	movs	r6, #0
 80003a0:	42a6      	cmp	r6, r4
 80003a2:	d109      	bne.n	80003b8 <__libc_init_array+0x24>
 80003a4:	4d0b      	ldr	r5, [pc, #44]	; (80003d4 <__libc_init_array+0x40>)
 80003a6:	4c0c      	ldr	r4, [pc, #48]	; (80003d8 <__libc_init_array+0x44>)
 80003a8:	f000 f818 	bl	80003dc <_init>
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	10a4      	asrs	r4, r4, #2
 80003b0:	2600      	movs	r6, #0
 80003b2:	42a6      	cmp	r6, r4
 80003b4:	d105      	bne.n	80003c2 <__libc_init_array+0x2e>
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003bc:	4798      	blx	r3
 80003be:	3601      	adds	r6, #1
 80003c0:	e7ee      	b.n	80003a0 <__libc_init_array+0xc>
 80003c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c6:	4798      	blx	r3
 80003c8:	3601      	adds	r6, #1
 80003ca:	e7f2      	b.n	80003b2 <__libc_init_array+0x1e>
 80003cc:	080003f4 	.word	0x080003f4
 80003d0:	080003f4 	.word	0x080003f4
 80003d4:	080003f4 	.word	0x080003f4
 80003d8:	080003f8 	.word	0x080003f8

080003dc <_init>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr

080003e8 <_fini>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr
